"use strict";(self.webpackChunkdocs_neuralmagic_com=self.webpackChunkdocs_neuralmagic_com||[]).push([[7586],{4366:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>l});var s=i(4848),a=i(8453);const t={tags:["to-do"],keywords:["to-do"],description:"Deploy DeepSparse in a Serverless framework with AWS Lambda.",sidebar_label:"AWS Lambda",sidebar_position:3},o="Deploying With DeepSparse on AWS Lambda",r={id:"guides/deploying-deepsparse/aws-lambda",title:"Deploying With DeepSparse on AWS Lambda",description:"Deploy DeepSparse in a Serverless framework with AWS Lambda.",source:"@site/docs/guides/deploying-deepsparse/aws-lambda.mdx",sourceDirName:"guides/deploying-deepsparse",slug:"/guides/deploying-deepsparse/aws-lambda",permalink:"/next/guides/deploying-deepsparse/aws-lambda",draft:!1,unlisted:!1,editUrl:"https://github.com/neuralmagic/docs/tree/main/docs/guides/deploying-deepsparse/aws-lambda.mdx",tags:[{label:"to-do",permalink:"/next/tags/to-do"}],version:"current",sidebarPosition:3,frontMatter:{tags:["to-do"],keywords:["to-do"],description:"Deploy DeepSparse in a Serverless framework with AWS Lambda.",sidebar_label:"AWS Lambda",sidebar_position:3},sidebar:"autogenerated_docs",previous:{title:"Amazon SageMaker",permalink:"/next/guides/deploying-deepsparse/amazon-sagemaker"},next:{title:"Google Cloud Run",permalink:"/next/guides/deploying-deepsparse/google-cloud-run"}},d={},l=[{value:"Requirements",id:"requirements",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Model Configuration",id:"model-configuration",level:2},{value:"Create Endpoint",id:"create-endpoint",level:2},{value:"Call Endpoint",id:"call-endpoint",level:2},{value:"Delete Endpoint",id:"delete-endpoint",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"deploying-with-deepsparse-on-aws-lambda",children:"Deploying With DeepSparse on AWS Lambda"}),"\n",(0,s.jsx)(n.p,{children:"AWS Lambda is an event-driven, serverless computing infrastructure for deploying applications at minimal cost. Since\nDeepSparse runs on commodity CPUs, you can deploy DeepSparse on Lambda!"}),"\n",(0,s.jsxs)(n.p,{children:["The DeepSparse GitHub repo contains a ",(0,s.jsx)(n.a,{href:"https://github.com/neuralmagic/deepsparse/tree/main/examples/aws-lambda",children:"guided example"}),"\nfor deploying a DeepSparse Pipeline on AWS Lambda for the sentiment analysis task."]}),"\n",(0,s.jsx)(n.p,{children:"The scope of this application encompasses:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The construction of a local Docker image."}),"\n",(0,s.jsx)(n.li,{children:"The creation of an ECR repo in AWS."}),"\n",(0,s.jsx)(n.li,{children:"Pushing the local image to ECR."}),"\n",(0,s.jsx)(n.li,{children:"The creation of the appropriate IAM permissions for handling Lambda."}),"\n",(0,s.jsx)(n.li,{children:"The creation of a Lambda function alongside an API Gateway in a CloudFormation stack."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsx)(n.p,{children:"The following credentials, tools, and libraries are also required:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html",children:"AWS CLI"})," version 2.X that is ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html",children:"configured"}),". Double check if the ",(0,s.jsx)(n.code,{children:"region"})," that is configured in your AWS CLI matches the region passed in the SparseLambda class found in the ",(0,s.jsx)(n.code,{children:"endpoint.py"})," file. Currently, the default region being used is ",(0,s.jsx)(n.code,{children:"us-east-1"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The AWS Serverless Application Model ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html",children:"(AWS SAM)"}),", an open-source CLI framework used for building serverless applications on AWS."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.a,{href:"https://docs.docker.com/get-docker/",children:["Docker and the ",(0,s.jsx)(n.code,{children:"docker"})," cli"]}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"boto3"})," python AWS SDK: ",(0,s.jsx)(n.code,{children:"pip install boto3"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/neuralmagic/deepsparse.git\ncd deepsparse/examples/aws-lambda\npip install -r requirements.txt\n"})}),"\n",(0,s.jsx)(n.h2,{id:"model-configuration",children:"Model Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["To use a different sparse model please edit the model zoo stub in the ",(0,s.jsx)(n.code,{children:"Dockerfile"}),".\nTo change pipeline configuration (e.g., change task, engine), edit the pipeline object in the ",(0,s.jsx)(n.code,{children:"app.py"})," file. Both files can be found in the ",(0,s.jsx)(n.code,{children:"/lambda-deepsparse/app"})," directory."]}),"\n",(0,s.jsx)(n.h2,{id:"create-endpoint",children:"Create Endpoint"}),"\n",(0,s.jsx)(n.p,{children:"Run the following command to build your Lambda endpoint."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python endpoint.py create\n"})}),"\n",(0,s.jsx)(n.h2,{id:"call-endpoint",children:"Call Endpoint"}),"\n",(0,s.jsx)(n.p,{children:"After the endpoint has been staged (~3 minutes), AWS SAM will provide your API Gateway endpoint URL in CLI. You can start making requests by passing this URL into the LambdaClient object. Afterwards, you can run inference by passing in your text input:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from client import LambdaClient\n\nLC = LambdaClient("https://#########.execute-api.us-east-1.amazonaws.com/inference")\nanswer = LC.client({"sequences": "i like pizza"})\n\nprint(answer)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["answer: ",(0,s.jsx)(n.code,{children:"{'labels': ['positive'], 'scores': [0.9990884065628052]}"})]}),"\n",(0,s.jsx)(n.p,{children:"On your first cold start, it will take a ~30 seconds to get your first inference, but afterwards, it should be in milliseconds."}),"\n",(0,s.jsx)(n.h2,{id:"delete-endpoint",children:"Delete Endpoint"}),"\n",(0,s.jsx)(n.p,{children:"If you want to delete your Lambda endpoint, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python endpoint.py destroy\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(6540);const a={},t=s.createContext(a);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);